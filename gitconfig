[user]
	email = emil.ramsvik@gmail.com
	name = Emil Ramsvik
[diff "astextplain"]
	textconv = astextplain
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[http]
	sslBackend = openssl
	sslCAInfo = C:/Users/eirw/AppData/Local/Programs/Git/mingw64/etc/ssl/certs/ca-bundle.crt
[core]
	autocrlf = true
	fscache = true
	symlinks = false
[pull]
	rebase = false
[credential]
	helper = manager
[credential "https://dev.azure.com"]
	useHttpPath = true
[init]
	defaultBranch = main
[diff]
	colorMoved = true ; give moved lines their own colour. Only works when paging with colour
	compactionheuristic = true
	mnemonicprefix = true ; replace a/b with (i)ndex/(c)ommit/(w)orking tree
	renames = copies ; detect file copies as a type of rename
[grep]
	lineNumber = true
	extendedRegexp = true
	fallbackToNoIndex = true
[alias]
# IDIOT_PROOF_GIT_BEGIN
[alias]
  # *********************
  # Abbreviations
    co = checkout
    ci = commit
    st = status
    statu = status
    stat = status
    sta = status

  # ********************
  # Amend shortcuts
    ammend = commit --amend
    amend = commit --amend

  # *********************
  # Logging and branches
    bruh = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
    hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all

  # *********************
  # Clean up local branches
    cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|main' | xargs -n 1 -r git branch -d"
    clean-all = "!git branch | grep  -v '\\*\\|master\\|main' | xargs -n 1 -r git branch -D"

  # *********************
  # What is 'trunk'?
  # Main or Master?; Upstream or origin?
    mainbranch = "!git remote show origin | sed -n '/HEAD branch/s/.*: //p'"
    mainremote = "!echo $((git remote get-url upstream > /dev/null 2>&1 && echo 'upstream') || (git remote get-url origin > /dev/null 2>&1 && echo 'origin'))"
    enterprisehost = "!echo 'your.enterprise.host'"
    trunk = "!git co $(git mainbranch)"  # goto main or master

  # *********************
  # Rebase workflow
    synced = "!git pull $((git remote get-url upstream > /dev/null 2>&1 && echo 'upstream') || (git remote get-url origin > /dev/null 2>&1 && echo 'origin')) $(git mainbranch)  --rebase"
    update = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"  # Update current branch with remote
    squash = "!git rebase -v -i $(git mainbranch)"
    publish = push origin HEAD --force-with-lease
    pub = publish


  # *********************
  # Github shortcuts
  #  Make / Load PR / diff
  #    From - https://salferrarello.com/git-alias-open-pull-request-github/
  #  Go to primary git "hub" (github or enterprisehost)
    pr = "!f() { \
       open \"$(git ls-remote --get-url $(git config --get branch.$(git rev-parse --abbrev-ref HEAD).remote) \
       | sed 's|git@github.com:\\(.*\\)$|https://github.com/\\1|' \
       | sed 's|git@'$(git enterprisehost)':\\(.*\\)$|https://'$(git enterprisehost)'/\\1|' \
       | sed 's|\\.git$||'; \
       )/compare/$(\
       git symbolic-ref HEAD 2> /dev/null | sed 's|refs/heads/||' \
       )?expand=1\"; \
  }; f"
    hub = "!f() { \
       open \"$(git ls-remote --get-url $(git mainremote) \
       | sed 's|git@github.com:\\(.*\\)$|https://github.com/\\1|' \
       | sed 's|git@'$(git enterprisehost)':\\(.*\\)$|https://'$(git enterprisehost)'/\\1|' \
       | sed 's|\\.git$||'; \
       )\"; \
  }; f"
# IDIOT_PROOF_GIT_END
    # List things
    tags = "tag -l"
    branches = "branch -a"
    remotes = "remote -v"

    # Shorten common commands
    co = "checkout"
    st = "status"
    br = "branch"
    ci = "commit"
    d = "diff"

    # Log that shows titles of last 16 commits
    l = "log -16 --color=always --all --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"

    # Log that starts a pager with titles of all the commits in your tree
    ll = log --color=always --all --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    # Log that shows the last 10 commits as a graph
    lg = "log -10 --color=always --all --graph --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"

    # Log that shows all commits as a graph (using a pager)
    lgl = "log --color=always --all --graph --topo-order --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

    # Show outgoing commits
    out = "log @{u}.."

    # Print the title of the current branch; sometimes useful for scripting
    currentbranch = "!git branch --contains HEAD | grep '*' | tr -s ' ' | cut -d ' ' -f2"

    # Better diffs for prose
    wdiff = "diff --color-words"

    # Safer pulls; don't do anything other than a fast forward on merge
    pull = "pull --ff-only"

    # Amend last commit without modifying commit message
    amend = "!git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend"

    # Create a commit that will be automatically squashed as a fixup when you
    # run `git rebase --autosquash`
    fixup = "commit --fixup=HEAD"
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
